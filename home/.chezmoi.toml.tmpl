# -*-mode:conf-toml-*- vim:ft=toml

# Define string variables for user-specific configurations
{{ $editor := "micro" }}            # Default editor

# Define boolean feature flags for machine-specific configurations
{{/* boolean feature tags */}}
{{- $encryption := false -}}        # Whether encryption are enabled
{{- $superuser := "" -}}            # Super User
{{- $setuptype := "" }}             # Setup Type
{{- $development := false -}}       # Whether development tools are enabled
{{- $kids := false -}}              # Whether this is a kid-friendly setup
{{- $passman := false -}}           # Whether password manager is enabled
{{- $codespace := false -}}         # Whether this is a GitHub Codespace
{{- $ephemeral := false -}}         # Whether this is an ephemeral machine
{{- $headless := false -}}          # Whether this is a headless machine
{{- $work := false -}}              # Whether this is a work machine
{{- $hub := false -}}               # Whether this is a Hub machine
{{- $node := false -}}              # Whether this is a Node machine
{{- $cloudflare := false -}}
{{ $name := "Laith Yousif" }}
{{ $email := "Laith@tmobi.link" }}

{{- if env "CHEZMOI_NAME" -}}
  {{- $name = env "CHEZMOI_NAME" -}}
{{- end -}}

{{- if env "CHEZMOI_EMAIL" -}}
  {{- $email = env "CHEZMOI_EMAIL" -}}
{{- end -}}

# Detect specific environments like GitHub Codespaces, VSCode remote containers, etc.

{{/* detect GitHub codespaces, VSCode remote containers, Docker containers, Multipass VMs, and Vagrant boxes */}}

{{- $isCodespace := env "CODESPACES" -}}
{{- $isRemoteEnvironment := env "REMOTE_CONTAINERS_IPC" -}}
{{- $isSpecialUser := eq .chezmoi.username "vagrant" "vscode" -}}
{{- if or $isCodespace $isRemoteEnvironment $isSpecialUser -}}
    sourceDir = {{ .chezmoi.sourceDir | quote }}  # Set source directory
    {{-   $codespace = true -}}                   # Mark as a codespace
    {{-   $ephemeral = true -}}                   # Mark as ephemeral
    {{-   $headless = true -}}                    # Mark as headless
    {{-   $encryption = false -}}                 # Disable encryption
    {{-   $development = false -}}                # Disable development tools
    {{-   $superuser = "sudo" -}}                 # Setup superuser to install tools

    {{/* for  GitHub codespaces, VSCode remote containers, Docker containers, */}}
    {{/* Multipass VMs, and Vagrant boxes setup the properties without asking */}}

{{- else -}}
    # Prompt user for configuration values if not in a codespace

      {{- if env "CHEZMOI_SETUP_TYPE" -}}
        {{- $setuptype = env "CHEZMOI_SETUP_TYPE" -}}
      {{- else -}}
        {{- $setuptype = promptChoiceOnce . "setuptype" "What type of setup are you choosing " (list "basic" "kids" "development" "work") "basic" -}}
      {{- end -}}

      {{- if env "CHEZMOI_USER_TYPE" -}}
        {{- $superuser = env "CHEZMOI_USER_TYPE" -}}
      {{- else -}}
        {{- $superuser = promptChoiceOnce . "superuser" "What type of user are you" (list "normal" "sudo") "sudo" -}}
        {{- if ne $superuser "sudo" -}}
          {{- $superuser = "" -}}
        {{- end -}}
      {{- end -}}

      {{- if eq $setuptype "basic" -}}
        {{ $development = false }}
        {{ $kids = false }}
        {{ $work = false }}
      {{- else if eq $setuptype "development" -}}
        {{ $development = true }}
        {{ $kids = false }}
        {{ $work = false }}
      {{- else if eq $setuptype "work" -}}
        {{ $development = true }}
        {{ $kids = false }}
        {{ $work = true }}
      {{- else if eq $setuptype "kids" -}}
        {{ $development = false }}
        {{ $kids = true }}
        {{ $work = false }}
      {{- end -}}

      {{- if eq $kids false -}}
          # Prompt for enabling encryption with a default value of true

          {{- if env "CHEZMOI_ENCRYPTION" -}}
            {{- $encryption = env "CHEZMOI_ENCRYPTION" -}}
          {{- else -}}
            {{- $encryption = promptBoolOnce . "features.encryption" "Should I setup Encryption Decryption  (true/false)" true -}}
          {{- end -}}


          # If encryption are enabled, prompt for the seting up password manager database path
          {{- if $encryption -}}
            {{- if env "CHEZMOI_PASS_MANAGER" -}}
              {{- $passman = env "CHEZMOI_PASS_MANAGER" -}}
            {{- else -}}
              {{- $passman = promptBoolOnce . "features.passman" "Should I setup a Password Manager  (true/false)" true -}}
            {{- end -}}

          {{- end -}}

          {{- if and $encryption $passman -}}

            {{- if env "CHEZMOI_NETWORK_HUB" -}}
              {{- $hub = env "CHEZMOI_NETWORK_HUB" -}}
            {{- else -}}
              {{- $hub = promptBoolOnce . "features.hub" "Should I setup this as a network hub to access other machines  (true/false)" false -}}
            {{- end -}}

            {{- if env "CHEZMOI_NETWORK_NODE" -}}
              {{- $node = env "CHEZMOI_NETWORK_NODE" -}}
            {{- else -}}
              {{- $node = promptBoolOnce . "features.node" "Should I setup this as a node  that can be accessed using ssh  (true/false)" true -}}
            {{- end -}}

            {{- if env "CHEZMOI_NETWORK_CLOUDFLARE" -}}
              {{- $cloudflare = env "CHEZMOI_NETWORK_CLOUDFLARE" -}}
            {{- else -}}
              {{- $cloudflare = promptBoolOnce . "features.cloudflare" "Should I setup this as a cloudflare dns updater (true/false)" false -}}
            {{- end -}}

          {{- end -}}
      {{- end -}}
{{- end -}}


# Determine the operating system ID
{{- $osid := .chezmoi.os -}}
{{- if hasKey .chezmoi.osRelease "id" -}}
  {{-   $osid = printf "%s-%s" .chezmoi.os .chezmoi.osRelease.id -}}
{{- end -}}
{{- if hasKey .chezmoi.osRelease "idLike" -}}
  {{-   $osid = printf "%s-%s" .chezmoi.os .chezmoi.osRelease.idLike -}}
{{- end -}}


{{- if $encryption -}}
 ## Encryption setup
encryption = "age"
[age]
    identity = "~/.config/chezmoi/key.txt"                                        # Path to the age identity file
    recipient = "age14t6vfqtd0f2z9gth0tsnw3qwh6nxgkvem5exjzs3x9juyp5659wqh47sfw"  # Age recipient key
{{- end -}}


# Define data section with user and machine-specific values
[data]
    email = "{{ $email }}"                                # User email
    name = "{{ $name }}"                                  # User name
    osid = "{{ $osid }}"                                  # Operating system ID
    setuptype = "{{ $setuptype }}"                        # Setup Type
    superuser = "{{ $superuser }}"                        # Superuser

    setups.base = {{ true }}                              # True basically always, the base is setups flag to setup the bare minimum
    setups.development = {{ $development }}               # development tools setups flag
    setups.kids = {{ $kids }}                             # Kids setups flag

    features.ephemeral = {{ $ephemeral }}                 # Ephemeral feature flag
    features.headless = {{ $headless }}                   # Headless feature flag
    features.encryption = {{ $encryption }}               # encryption feature flag
    features.codespace = {{ $codespace }}                 # Codespace feature flag
    features.passman = {{ $passman }}                     # Password manager feature flag
    features.work = {{ $work }}                           # Work feature flag
    features.hub = {{ $hub }}                             # Hub feature flag
    features.node = {{ $node }}                           # Node feature flag
    features.cloudflare = {{ $cloudflare }}               # Cloudflare feature flag


# Define editor settings
[edit]
    command = {{ $editor | quote }}                                     # Editor command
    args = ["--wait"]                                                   # Editor arguments
# adding better handling of work and base profiles

# Define KeepassXC settings
[keepassxc]
    command = "my_chezmoi_keepassxc.sh"
    database = "{{ .chezmoi.destDir }}/.keepassxc/chezmoi.kdbx"                                 # KeepassXC database path
    args = ["-k", "{{ .chezmoi.destDir }}/.keepassxc/keypass.keyx"]      # KeepassXC arguments
    prompt = false

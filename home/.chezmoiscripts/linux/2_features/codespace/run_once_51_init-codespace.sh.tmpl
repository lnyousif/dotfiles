#!/bin/bash

# Exit on error
set -e

# Colors for terminal output
GREEN="\033[1;32m"
YELLOW="\033[1;33m"
CYAN="\033[1;36m"
RED="\033[1;31m"
RESET="\033[0m"

# Display a clear and colorful terminal message
echo -e "${CYAN}========================================${RESET}"
echo -e "${GREEN}üöÄ Welcome to your CodeSpace Environment!${RESET}"
echo -e "${YELLOW}üîß Setting up your environment using DotFiles...${RESET}"
echo -e "${CYAN}========================================${RESET}"

# Function to check if a command exists
command_exists() {
  command -v "$1" &> /dev/null
}

# Function to display status messages
status_msg() {
  echo -e "${YELLOW}‚û°Ô∏è $1${RESET}"
}

# Function to display success messages
success_msg() {
  echo -e "${GREEN}‚úÖ $1${RESET}"
}

# Function to display error messages
error_msg() {
  echo -e "${RED}‚ùå $1${RESET}"
}

# Check for essential development tools
status_msg "Checking essential development tools..."
TOOLS=("git" "curl" "jq" "tmux")
MISSING=0

for tool in "${TOOLS[@]}"; do
  if ! command_exists "$tool"; then
    error_msg "$tool is not installed!"
    MISSING=1
  fi
done

# Configure git if needed
if command_exists git; then
  status_msg "Configuring Git settings..."

  # Set up comprehensive Git configuration
  git config --global commit.gpgsign true
  git config --global core.autocrlf false
  git config --global init.defaultBranch main
  git config --global merge.ff only
  git config --global tag.forceSignAnnotated true
  git config --global user.email {{ .email }}
  git config --global user.name {{ .name }}
  git config --global user.signingkey EA6B1EE06E66135725CCA17ED7101733BB16C507

  echo "Git is Configured!"



  # Set GPG signing key
  git config --global user.signingkey EA6B1EE06E66135725CCA17ED7101733BB16C507

  # Add useful Git aliases
  git config --global alias.co checkout
  git config --global alias.br branch
  git config --global alias.st status
  git config --global alias.lg "log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit"

  success_msg "Git configuration complete"
fi

# Create or update local dotfiles specific to this container
status_msg "Setting up container-specific configurations..."

# Create useful aliases for the container environment
if [ -f "$HOME/.bash_aliases" ]; then
  cat << EOF >> "$HOME/.bash_aliases"

# CodeSpace specific aliases
alias proj="cd \$CODESPACE_VSCODE_FOLDER"
alias refresh="source ~/.bashrc"
EOF
  success_msg "Added CodeSpace-specific aliases"
fi

# Setup project-specific environment if detected
if [ -n "$CODESPACE_VSCODE_FOLDER" ] && [ -d "$CODESPACE_VSCODE_FOLDER" ]; then
  status_msg "Setting up project-specific environment..."

  # Check for project-specific setup scripts and run them
  if [ -f "$CODESPACE_VSCODE_FOLDER/.devcontainer/project-setup.sh" ]; then
    status_msg "Running project setup script..."
    bash "$CODESPACE_VSCODE_FOLDER/.devcontainer/project-setup.sh"
    success_msg "Project setup complete"
  fi
fi

# Display completion message
echo -e "${CYAN}========================================${RESET}"
echo -e "${GREEN}‚ú® CodeSpace environment setup complete!${RESET}"
echo -e "${YELLOW}üí° Tip: Use 'proj' alias to navigate to your project folder${RESET}"
echo -e "${CYAN}========================================${RESET}"

# Return success
exit 0
